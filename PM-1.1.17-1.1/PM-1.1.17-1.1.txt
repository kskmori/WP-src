= Pacemaker-1.1.17-1.1 リポジトリパッケージ

Pacemaker-1.1.17-1.1 リポジトリパッケージをリリースしました。

このページでは Pacemaker-1.1.17-1.1 リポジトリパッケージの簡単な使い方を説明します。

このページの変更履歴

* 2017.02.14 Pacemaker-1.1.17-1.1(RHEL6/RHEL7用)リポジトリパッケージリリース
* 2017.11.22 必須パッケージインストール(CentOS 7のみ)を追記

== Pacemaker-1.1.17-1.1 の概要


Pacemaker-1.1.17-1.1 リポジトリパッケージは、前回のリリース版 http://linux-ha.osdn.jp/wp/archives/4618[Pacemaker-1.1.16-1.1リポジトリパッケージ] からバグ修正等が行われたマイナーバージョンアップ版です。

利用方法は従来の 1.1.16-1.1 から変更はありませんが、 RHEL 6版では watchdog 関係の推奨設定箇所が変更になっています(<<config-init,「クラスタ起動スクリプトの設定」>>の項参照)。

その他の主な差分・改善点については<<changelog,「1.1.16-1.1 からの主な差分」>>の項を参照してください。

また本ページに記載している構築手順を自動化した Ansible Playbook の例を併せて公開していますので、ぜひご参考ください(<<ansible,「Ansible Playbook 例」>>の章参照)。

より具体的な構成例・利用手順については、<<applications,「応用事例」>>の章に参考情報を記載しています。

== ダウンロード

Pacemaker-1.1.17-1.1リポジトリパッケージのリリース版は以下のページよりダウンロードできます。

* https://osdn.net/projects/linux-ha/releases/69021[Pacemakerリポジトリパッケージ (RHEL 7) 1.1.17-1.1]

* https://osdn.net/projects/linux-ha/releases/69022[Pacemakerリポジトリパッケージ (RHEL 6) 1.1.17-1.1]

* 対応環境: RHEL 6 / RHEL 7 および互換OS、x86_64環境
* _※ RHEL 6.5以前の環境では、以下の Errata 適用が必須です。_
** https://rhn.redhat.com/errata/RHBA-2014-1538.html[RHBA-2014:1538-1 glib2 bug fix and enhancement update]

== インストール前の準備

Pacemaker インストール時に必要な依存パッケージも自動的にインストールできるようにするため、
あらかじめ OS のインストールメディア等が参照できるようにしておきます。

CentOS上にインストールする場合は以下の追加設定も行ってください。

=== リポジトリ追加設定(CentOS のみ)

CentOS上にインストールする場合、CentOS 同梱版の Pacemaker と混在してしまわないように
以下の +exclude+ 設定を追加します。

*/etc/yum.repos.d/CentOS-Base.repo 設定例*::
----------------------------------------------------------------
[base]
(...)
exclude=pacemaker* corosync* resource-agents* crmsh* cluster-glue* libqb* fence-agents* pcs*

[updates]
(...)
exclude=pacemaker* corosync* resource-agents* crmsh* cluster-glue* libqb* fence-agents* pcs*
----------------------------------------------------------------

=== 必須パッケージインストール(CentOS 7のみ)

CentOS 7 上にインストールする場合、+NetworkManager-config-server+ パッケージを
インストールして、+NetworkManager+ を再起動してください。

----------------------------------------------------------------
# yum install -y NetworkManager-config-server
# systemctl restart NetworkManager
----------------------------------------------------------------

* 補足
** RHEL 7 では +NetworkManager-config-server+ パッケージは標準で必ずインストールされるため特別な手順は不要です。
** 詳細については別記事 http://linux-ha.osdn.jp/wp/?p=4798[CentOS 7 で Pacemaker を利用する場合の注意点] を参照してください。

== インストール

以下の手順で Pacemakerをインストールします。
+yum+ コマンドにより必要な依存パッケージも自動的にインストールされます。

----------------------------------------------------------------
# yum install -y pacemaker-repo-1.1.17-1.1.el7.x86_64.rpm
# yum install -y pacemaker-all
----------------------------------------------------------------


== 設定例

[[config-corosync]]
=== corosync設定ファイルの設定

corosyncの動作に必要な設定を行います。
以下は最低限必要な設定例です。

*/etc/corosync/corosync.conf 設定例*::
----------------------------------------------------------------
totem {
        version: 2
        token: 1000
        rrp_mode: active
        interface {
                ringnumber: 0
                bindnetaddr: 192.168.101.0
                mcastaddr: 239.255.1.1
                mcastport: 5405
        }
        interface {
                ringnumber: 1
                bindnetaddr: 192.168.102.0
                mcastaddr: 239.255.1.2
                mcastport: 5405
        }
}

logging {
        syslog_facility: daemon
        debug: off
}

quorum {
        provider: corosync_votequorum
        expected_votes: 2
}
----------------------------------------------------------------

ここで以下の設定項目は環境に合わせて設定してください。

* +bindnetaddr+, +mcastaddr+, +mcastport+: ネットワークに合わせて設定します。
* +syslog_facility+ : ログの出力先を変更したい場合は適宜変更します。
* +expected_votes+ : クラスタを構成するノードの数を設定します。

詳細は corysync.conf(5) マニュアルページ等を参照してください。



=== corosync認証鍵ファイルの設定

corosyncの認証を行うための認証鍵ファイルを作成します。

どれか一つのノード上で +corosync-keygen+ コマンドを実行し、生成された
+authkey+ ファイルをクラスタを構成する全てのノードにコピーします。
以下の手順例は node2 へコピーしている例です。

*/etc/corosync/authkey 設定手順例*::
----------------------------------------------------------------
# corosync-keygen -l
# scp -p /etc/corosync/authkey root@node2:/etc/corosync/authkey
----------------------------------------------------------------


=== pacemaker設定ファイルの設定

Pacemakerの内部プロセスが故障した場合もノード故障として取り扱うようにするため、
以下の設定を追加します。

記述内容は RHEL 6(Upstart 利用)と RHEL 7(systemd 利用)で異なります。

==== pacemaker設定ファイルの設定(RHEL 6用)
*/etc/sysconfig/pacemaker (追加設定行)*::
----------------------------------------------------------------
export PCMK_fail_fast=yes
----------------------------------------------------------------

==== pacemaker設定ファイルの設定(RHEL 7用)
*/etc/sysconfig/pacemaker (追加設定行)*::
----------------------------------------------------------------
PCMK_fail_fast=yes
----------------------------------------------------------------

[[config-init]]
=== クラスタ起動スクリプトの設定

故障時の動作等のカスタマイズのためクラスタ起動スクリプトを一部修正します。

修正する内容は RHEL 6(Upstart 利用)と RHEL 7(systemd 利用)で異なります。

==== クラスタ起動スクリプトの設定(RHEL 6用)

RHEL 6では、以下の設定を行うためクラスタ起動スクリプトの一部を修正します。

* pacemakerサービス停止時に corosyncサービスも同時に停止させるため
* corosyncプロセス故障時に watchdog 機能を有効にするため

以下に修正箇所を示します。

*/etc/init/corosync.conf (修正箇所抜粋)*::
[source,diff]
----------------------------------------------------------------
--- corosync.conf.1.1.17.org	2017-09-19 15:42:13.000000000 +0900
+++ corosync.conf	2017-09-29 16:58:29.104999977 +0900
@@ -19,7 +19,7 @@
 pre-start script
     mkdir -p /var/run
     # rewrite according to environment.
-    #[ -c /dev/watchdog ] || modprobe softdog
+    [ -c /dev/watchdog ] || modprobe softdog
 end script
 
 post-start script
----------------------------------------------------------------

*/etc/init/pacemaker.combined.conf (修正箇所抜粋)*::
[source,diff]
----------------------------------------------------------------
--- pacemaker.combined.conf.1.1.17.org	2017-08-30 16:58:56.000000000 +0900
+++ pacemaker.combined.conf	2017-09-29 16:58:28.614999977 +0900
@@ -52,7 +52,7 @@
     #stop corosync-notifyd || true
 
     # if you use watchdog of corosync, uncomment the line below.
-    #pidof corosync || false
+    pidof corosync || false
 
     pidof crmd || stop corosync
 
----------------------------------------------------------------

* *1.1.17-1.1 での変更点*
** 1.1.17-1.1 以降では、modprobe softdog の設定を corosync.conf に設定するのが推奨となりました(1.1.16-1.1 以前では pacemaker.combined.conf に設定していました)。どちらに設定しても実質的な動作は変わりませんが、RHEL 7用設定との整合性などのため変更されています。

==== クラスタ起動スクリプトの設定(RHEL 7用)

RHEL 7では、以下の設定を行うためクラスタ起動スクリプト(systemd の Unitファイル)の一部を修正します。

* pacemakerサービス停止時に corosyncサービスも同時に停止させるため
* corosyncプロセス故障時に watchdog 機能を有効にするため

修正は、Unitファイルをパッケージ標準ディレクトリ(+/usr/lib/systemd/system/+)からローカル設定用ディレクトリ(+/etc/systemd/system/+)にコピーして修正します。

以下に修正箇所を示します。

*/etc/systemd/system/corosync.service (修正箇所抜粋)*::
[source,diff]
----------------------------------------------------------------
# cp -p /usr/lib/systemd/system/corosync.service /etc/systemd/system
# vi /etc/systemd/system/corosync.service

--- /usr/lib/systemd/system/corosync.service	2017-09-19 15:09:44.000000000 +0900
+++ /etc/systemd/system/corosync.service	2017-10-03 10:13:56.915862163 +0900
@@ -15,11 +15,11 @@
 #  pacemaker.service, and if you want to exert the watchdog when a
 #  corosync process is terminated abnormally,
 #  uncomment the line of the following Restart= and RestartSec=.
-#Restart=on-failure
+Restart=on-failure
 #  Specify a period longer than soft_margin as RestartSec.
-#RestartSec=70
+RestartSec=70
 #  rewrite according to environment.
-#ExecStartPre=/sbin/modprobe softdog
+ExecStartPre=/sbin/modprobe softdog
 
 [Install]
 WantedBy=multi-user.target
----------------------------------------------------------------

*/etc/systemd/system/pacemaker.service (修正箇所抜粋)*::
[source,diff]
----------------------------------------------------------------
# cp -p /usr/lib/systemd/system/pacemaker.service /etc/systemd/system
# vi /etc/systemd/system/pacemaker.service

--- /usr/lib/systemd/system/pacemaker.service	2017-08-30 16:37:05.000000000 +0900
+++ /etc/systemd/system/pacemaker.service	2017-10-03 10:13:57.778862163 +0900
@@ -57,7 +57,7 @@
 # If you want Corosync to stop whenever Pacemaker is stopped,
 # uncomment the next line too:
 #
-# ExecStopPost=/bin/sh -c 'pidof crmd || killall -TERM corosync'
+ExecStopPost=/bin/sh -c 'pidof crmd || killall -TERM corosync'
 
 # Uncomment this for older versions of systemd that didn't support
 # TimeoutStopSec
----------------------------------------------------------------


== 起動・終了

Upstart経由(RHEL 6の場合) または systemd経由(RHEL 7の場合)で起動する手順が推奨です。

このため、RHEL 6とRHEL 7で Pacemaker の起動・終了コマンドが異なります。


=== 起動コマンド

Pacemakerを起動するには以下のコマンドを実行します。クラスタを構成する全てのノードで実行してください。

==== 起動コマンド(RHEL 6用)

----------------------------------------------------------------
# initctl start pacemaker.combined
----------------------------------------------------------------

==== 起動コマンド(RHEL 7用)

----------------------------------------------------------------
# systemctl start pacemaker
----------------------------------------------------------------

=== 起動確認コマンド

正常に起動すると、+crm_mon+ コマンドの表示でノードが Online 状態となります。

----------------------------------------------------------------
# crm_mon -D1
Online: [ node1 node2 ]

----------------------------------------------------------------


=== 終了コマンド

Pacemakerを停止するには以下のコマンドを実行します。クラスタを構成する全てのノードで実行してください。

==== 終了コマンド (RHEL 6用)

----------------------------------------------------------------
# initctl stop pacemaker.combined
----------------------------------------------------------------

==== 終了コマンド (RHEL 7用)

----------------------------------------------------------------
# systemctl stop pacemaker
----------------------------------------------------------------


== アンインストール

以下の手順で Pacemaker リポジトリパッケージを
全てアンインストールできます。

* Pacemaker本体のアンインストール
----------------------------------------------------------------
# yum erase pacemaker corocync libqb cluster-glue cluster-glue-libs resource-agents \
pm_crmgen pm_logconv-cs pm_diskd pm_extras crmsh pssh
----------------------------------------------------------------

* Pacemakerリポジトリパッケージのアンインストール
----------------------------------------------------------------
# yum erase -y pacemaker-repo
# yum list installed | grep pacemaker-repo
# 
----------------------------------------------------------------

[[applications]]
== 応用事例
=== 基本構成例

Pacemakerを使った具体的な高可用クラスタ構成例・利用手順として、以下のOSCのセミナー資料が非常に参考になります。
これらのセミナー資料は Pacemaker-1.1.12-1.1を使った例ですが、<<config-corosync,「corosync設定ファイルの設定」>>、<<config-init,「クラスタ起動スクリプトの設定」>>の差分に注意してもらえればそのまま適用可能です。

* OSCセミナー資料
** http://linux-ha.osdn.jp/wp/archives/4038[すぐに始められる！最新のPacemakerで始める高可用クラスタ入門 (OSC2014 Tokyo/Fall)]
** http://linux-ha.osdn.jp/wp/archives/4098[Pacemaker-1.1で始める高可用クラスタ入門 ～私が落ちても代わりはいるもの～ (OSC2015 Nagoya)]

=== PG-REX

PG-REXは、PacemakerとPostgreSQLレプリケーション機能を組み合わせたソリューションです。
非共有ディスク型の高可用データベースが構築できます。

* PG-REXプロジェクトホームページ
** https://osdn.net/projects/pg-rex/
* OSCセミナー資料
** http://linux-ha.osdn.jp/wp/archives/4627[試して覚えるPacemaker入門 PG-REX構築 (OSC2017 Kyoto)]
** http://linux-ha.osdn.jp/wp/archives/4664[試して覚えるPacemaker入門 PG-REX運用 (OSC2018 Osaka)]

[[ansible]]
== Ansible Playbook 例 ==

=== Pacemaker リポジトリパッケージ用 Playbook

上記2章から7章までの手順を Ansible で自動化した Playbook の例です。
詳細はリンク先の README.md を参照してください。

* https://github.com/kskmori/ansible-pacemaker/[Pacemaker リポジトリパッケージ用 Ansible Playbook]

=== PG-REX用 playbook

PG-REXプロジェクトのドキュメントの手順を Ansible で自動化した Playbook の例です。
前項の Pacemaker リポジトリパッケージ用 Playbook と組み合わせて利用します。

* https://github.com/kskmori/ansible-pgrex/[PG-REX用 Ansible Playbook]


[[releasenotes]]
== リリースノート
=== リポジトリパッケージ内容

Pacemaker利用に必要なコンポーネントを一括してまとめインストールを容易にできるようにしたリポジトリパッケージです。
RHEL 6 / RHEL 7 およびこれらの RHEL互換OSに対応しています。

1.1.17-1.1リポジトリパッケージには、以下のバージョンのコンポーネントが含まれています。

推奨インストール手順では★印のついたパッケージがインストールされます。
太字は 1.1.16-1.1 から変更されたパッケージです。

* バージョン一覧
** リポジトリパッケージ
*** *pacemaker-repo-1.1.17-1.1* ★
** 主要コンポーネント
*** *pacemaker-1.1.17-1*  ★
*** *cluster-glue-1.0.12-3*  ★
*** *corosync-2.4.2-2*  ★
*** *libqb-1.0.2-1*  ★
*** *resource-agents-4.0.1-2* ★
*** *ldirectord-4.0.1-2*
*** crmsh-2.1.9-1  ★
*** pssh-2.3.1-5  ★
** Linux-HA Japan拡張コンポーネント
*** pm_crmgen-2.2-1  ★
*** pm_diskd-2.3-1  ★
*** pm_extras-2.3-1  ★
*** *pm_logconv-cs-2.5-1*  ★
*** pm_ctl-2.0-1
** 追加コンポーネント
*** *pcs-0.9.159-1*
*** fence-agents-4.0.22-1  (RHEL6版)
*** *fence-agents-4.0.25-1*  (RHEL7版)

* 補足
** Heartbeatは今後非推奨とするためパッケージには含みません。
** ユーザインタフェースとして crmsh, pcs の2種類のコンポーネントを同梱していますが、1.0系と同様 crmsh の利用を推奨します。
** crmsh の機能のうち、pssh を利用する一部の機能(crm resource secret, crm cluster 等)は利用できません(コミュニティ版psshの制約による)。将来のバージョンアップ(crmsh-2.2系以降)で改善を検討します。
** crmsh-2.1.9 は、pacemaker-1.1.17 からサポートされた bundle リソース・タイプには対応していません。
** pcs は本パッケージでは「テクノロジープレビュー」(お試し版)の位置付けで添付しており、実用目的の利用は推奨しません。また利用する場合はさらに依存パッケージの追加インストールが必要です。
** STONITHプラグインとして cluster-glue, fence-agents の2種類のコンポーネントを同梱していますが、1.0系と同様 cluster-glue に含まれるSTONITHプラグインの利用を推奨します。
** 1.0.13リポジトリパッケージに含まれていた pm_kvm_tools, vm-ctl コンポーネントは本バージョンには対応していないためパッケージには含みません。
** RHEL6版のfence-agentsは 4.0.22 を最終版とします。以降の版については、開発者がRHEL6はサポート外であることを明言しRHEL6非互換の修正が入っているためです。




[[changelog]]
=== 1.1.16-1.1 からの主な差分

Pacemaker-1.1.16-1.1からの主な差分について記載します。

* pacemaker-1.1.17-1
** Docker コンテナの制御用に bundle リソース・タイプが追加されました。（ただし、crmsh は対応していません。）
** ノード起動時に standby 状態にする機能が追加されました。
** STONITH 処理のリトライ回数を指定するオプション(stonith-max-attempts)が追加されました。
** 大規模クラスタ用に、一度に処理される IPC メッセージキューの最大数を指定するオプション(cluster-ipc-limit)が追加されました。
* corosync-2.4.2-2
** RHEL6 環境の起動スクリプトに softdog の設定例が追加されました。
* cluster-glue-1.0.12-3
** 最新版に追随しました。
* libqb-1.0.2-1
** プロセス間通信バッファ破損時に Pacemaker プロセスが応答しなくなる問題が修正されました。
* resource-agents-4.0.1-2
** pgsql: PostgreSQL 10 に対応しました。
* pm_logconv-cs-2.5-1
** pacemaker-1.1.17 のログに対応しました。
** ローテートログの探索処理を改善しました。
** 不完全な変換ログが出力される問題を修正しました。
* pcs-0.9.159-1
** 最新版に追随しました。
* fence-agents-4.0.25-1 (RHEL7版)
** 最新版に追随しました。


以上です。
